name: C/C++ CI

on:
  push:
    branches: [ '*' ]
    tags:
      - '*'
  pull_request:
    branches: [ '*' ]
  workflow_dispatch: {}

jobs:
  format-check:
    runs-on: self-hosted
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/image:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: check
      run: |
        find . \( -name '*.cpp' -or -name '*.hpp' \) -exec clang-format -i -style=file '{}' ';'
        git status -s
        exit $(git status -s | wc -l)

  build:
    runs-on: self-hosted
    strategy:
      matrix:
        build-type: [Release, Debug, Sanitize]
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/wolframbased:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: configure
      run: |
        mkdir ${{ matrix.build-type }}
        cd ${{ matrix.build-type }}
        CXX=clang++-11 CC=clang-11 cmake -DCMAKE_INSTALL_PREFIX=../install -DRacket_ROOT=/usr -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_CXX_FLAGS:STRING="-std=c++17" -DCMAKE_CXX_CLANG_TIDY=clang-tidy-11 ..
        cd ..
    - name: build
      run: cmake --build ${{ matrix.build-type }} -- -j $(nproc)
    - name: install
      run: cmake --build ${{ matrix.build-type }} --target install
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.build-type }}
        retention-days: 1
        path: |
          install
    needs: [format-check]

  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Release, Debug]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.build-type }}
          path: ${{ matrix.build-type }}
      - name: Set output
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: list files
        run: find .
      - name: create tarball
        run: tar --strip-components=1 -czf ${{ runner.os }}-${{ matrix.build-type }}.tar.gz ${{ matrix.build-type }}
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ runner.os }}-${{ matrix.build-type }}.tar.gz
          name: ${{ steps.vars.outputs.short_ref }}
    needs: [build]
