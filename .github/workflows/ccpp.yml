name: C/C++ CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch: {}

jobs:
  format-check:
    runs-on: self-hosted
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/image:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - name: check
      run: |
        find . \( -name '*.cpp' -or -name '*.hpp' \) -exec clang-format -i -style=file '{}' ';'
        git status -s
        exit $(git status -s | wc -l)

  build:
    runs-on: self-hosted
    strategy:
      matrix:
        build-type: [Release, Debug, Sanitize]
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/wolframbased:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: configure
      run: |
        mkdir ${{ matrix.build-type }}
        cd ${{ matrix.build-type }}
        cmake -DRacket_ROOT=/usr -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_CXX_FLAGS:STRING="-std=c++17" -DCMAKE_CXX_COMPILER:STRING=clang++-11 -DCMAKE_CXX_CLANG_TIDY=clang-tidy-11 ..
        cd ..
    - name: build
      run: cmake --build ${{ matrix.build-type }} -- -j $(nproc)
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.build-type }}
        retention-days: 1
        path: |
          ${{ matrix.build-type }}
          !${{ matrix.build-type }}/deps
          !${{ matrix.build-type }}/CMakeFiles
          !${{ matrix.build-type }}/catch2-prefix
          !${{ matrix.build-type }}/googlebenchmark-prefix
    needs: [format-check]

  test:
    runs-on: self-hosted
    strategy:
      matrix:
        build-type: [Release, Debug, Sanitize]
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/wolframbased:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.build-type }}
        path: ${{ matrix.build-type }}
    - name: test
      run: |
        expect -c 'spawn wolframscript' -c 'expect -exact "Wolfram ID: "' -c 'send -- "'"${{ secrets.MATHEMATICA_USERNAME }}"'\r"' -c 'expect -exact "Password: "' -c 'send -- "'"${{ secrets.MATHEMATICA_PASSWORD }}"'\r"' -c 'expect -exact "\[1GIn\[1\]:="' -c 'send -- "Exit\[\]\r"'
        chmod +x ./${{ matrix.build-type }}/Tests && ./${{ matrix.build-type }}/Tests
    needs: [build]

  racket-test:
    runs-on: self-hosted
    container:
      image: docker.pkg.github.com/little-big-h/buildenvironment/wolframbased:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: Debug
        path: Debug
    - name: test
      run: |
        expect -c 'spawn wolframscript' -c 'expect -exact "Wolfram ID: "' -c 'send -- "'"${{ secrets.MATHEMATICA_USERNAME }}"'\r"' -c 'expect -exact "Password: "' -c 'send -- "'"${{ secrets.MATHEMATICA_PASSWORD }}"'\r"' -c 'expect -exact "\[1GIn\[1\]:="' -c 'send -- "Exit\[\]\r"'
        find Debug
        cp Debug/RacketBOSS.so .
        emacs --batch --eval "(require 'org)" --eval '(add-to-list (quote org-babel-tangle-lang-exts) (quote ("racket" . "rkt")))' --eval '(org-babel-tangle-file "Readme.org")'
        racket -e '(load "Readme.rkt")' -e "(require 'Readme)"
    needs: [build]

